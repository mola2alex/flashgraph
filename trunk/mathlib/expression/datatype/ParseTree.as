package mathlib.expression.datatype {	public class ParseTree {		public var token:Token;		public var isLeaf:Boolean;		public var children:Array;				public function ParseTree(_token:Token, _isLeaf:Boolean = true):void {			token = _token;			isLeaf = _isLeaf;			if(!isLeaf)	children = new Array();		}				public function appendChild(_t:ParseTree):void {			if(isLeaf) {				isLeaf = false;				children = new Array(_t);			}			else				children.push(_t);		}				public function toString():String {			var childrenStr:String;			var i:int;						if(isLeaf)				return "(" + token.toString() + ")";			else {				childrenStr = "(" + token.toString();								for(i = 0; i < children.length; i++)					childrenStr += children[i].toString();								childrenStr += ")";								return childrenStr;			}		}	}}