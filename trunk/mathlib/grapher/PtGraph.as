package mathlib.grapher {	import flash.display.Sprite;	import flash.geom.Point;		public class PtGraph extends Sprite {		public var pts:Array, parentGrapher:Grapher2D, lineStyle:LineStyle;		public var connected:Boolean, showPoints:Boolean;				public function PtGraph(n_parentGrapher:Grapher2D, n_pts:Array, n_connected:Boolean = true, n_showPoints:Boolean = true, n_lineStyle:LineStyle = null):void {			super();						parentGrapher = n_parentGrapher;			pts = n_pts;			connected = n_connected;			showPoints = n_showPoints;						if(n_lineStyle == null) lineStyle = LineStyle.Hairline;			else lineStyle = n_lineStyle;						doubleClickEnabled = true;		}				public function draw():void {			var i:int, pt:Point;						lineStyle.apply(graphics);						for(i = 0; i < pts.length; i++) {				pt = pts[i];							if(showPoints) {					//graphics.beginFill(lineStyle.color);					parentGrapher.graphDrawPoint(graphics, pt.x, pt.y);					//graphics.endFill();				}				if(connected && i > 0) {					var ppt:Point = pts[i - 1];										var poutside:Boolean = outsideGraph(pt);					var ppoutside:Boolean = outsideGraph(ppt);										//if(!poutside && !ppoutside) {						parentGrapher.graphMoveTo(graphics, ppt.x, ppt.y);						parentGrapher.graphLineTo(graphics, pt.x, pt.y);					//}					/*else if(poutside && !ppoutside) {						// new point outside graph, old point inside					}					else if(!poutside && ppoutside) {						// new point inside, old point outside					}*/				}			}		}				private function outsideGraph(pt:Point):Boolean {			return pt.x > parentGrapher.xmax || pt.x < parentGrapher.xmin ||				   pt.y > parentGrapher.ymax || pt.y < parentGrapher.ymin;		}				public function redraw():void {			graphics.clear();			draw();		}				public function addPoint(graphx:Number, graphy:Number):void {			pts.push(new Point(graphx, graphy));						lineStyle.apply(graphics);			if(showPoints) {				//graphics.beginFill(lineStyle.color);				parentGrapher.graphDrawPoint(graphics, graphx, graphy);				//graphics.endFill();			}			if(connected && pts.length > 1) {				parentGrapher.graphMoveTo(graphics, pts[pts.length - 2].x, pts[pts.length - 2].y);				parentGrapher.graphLineTo(graphics, graphx, graphy);			}		}	}}