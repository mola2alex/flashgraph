package mathlib.expression {	import mathlib.expression.datatype.IndVar;		public class CompiledFn {		public var prefixArray:Array;		public var env:Environment;		private var cursor:int;				public function CompiledFn(_prefixArray:Array, _env:Environment):void {			prefixArray = _prefixArray;			env = _env;		}				public function eval(... varVals):Number {			var i:int, argCount:int = varVals.length;						if(env.varCount != argCount)				throw new ArgumentError("Expected " + env.varCount + " arguments, but got " + argCount); 						for(i = 0; i < argCount; i++)				env.vars[i].val = varVals[i];							return evalAsIs();		}				public function evalWithArray(varVals:Array):Number {			return eval.apply(this, varVals);		}				// internal.. the optimizing compiler uses it too, to get around having to supply dummy arguments to eval when computing constant parsetrees		internal function evalAsIs():Number {			cursor = 0;			return evalArr();		}				// actually evaluates the array, starting at index cursor		private function evalArr():Number {			var i:int, arity:int, f:Function, vals:Array, head:*;						if(cursor > prefixArray.length - 1) throw new Error("unexpected end of compiled function array");			head = prefixArray[cursor++];			// constants collapse to numbers at lex time			if(head is Number) return head;						if(head is IndVar) return head.val;			if(head is Function) {				// little known fact: a Function's length is its arity				f = head;				arity = f.length;								// almost all the functions anyone would be using will have 0, 1, or 2 arguments,				// we we unwind the loop for those cases.				switch(arity) {					case 0:						return f();							case 1:						return f(evalArr());							case 2:						return f(evalArr(), evalArr());							default:						vals = new Array(arity);								for(i = 0; i < arity; i++)							vals[i] = evalArr();								return f.apply(null, vals);				}			}				throw new Error("unexpected element in compiled function array: " + head.toString());		}			}}